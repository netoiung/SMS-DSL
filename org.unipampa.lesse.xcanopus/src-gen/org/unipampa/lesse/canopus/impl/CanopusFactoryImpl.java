/**
 * generated by Xtext 2.14.0
 */
package org.unipampa.lesse.canopus.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.unipampa.lesse.canopus.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class CanopusFactoryImpl extends EFactoryImpl implements CanopusFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static CanopusFactory init()
  {
    try
    {
      CanopusFactory theCanopusFactory = (CanopusFactory)EPackage.Registry.INSTANCE.getEFactory(CanopusPackage.eNS_URI);
      if (theCanopusFactory != null)
      {
        return theCanopusFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new CanopusFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CanopusFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case CanopusPackage.MODEL: return createModel();
      case CanopusPackage.INCLUDE: return createInclude();
      case CanopusPackage.MONITORING: return createMonitoring();
      case CanopusPackage.METRIC: return createMetric();
      case CanopusPackage.SUT: return createSUT();
      case CanopusPackage.LOAD_GENERATOR: return createLoadGenerator();
      case CanopusPackage.MONITOR: return createMonitor();
      case CanopusPackage.METRIC_MODEL: return createMetricModel();
      case CanopusPackage.METRIC_COLLECTION: return createMetricCollection();
      case CanopusPackage.THRESHOLD: return createThreshold();
      case CanopusPackage.MEMORY: return createMemory();
      case CanopusPackage.DISK: return createDisk();
      case CanopusPackage.TRANSACTION: return createTransaction();
      case CanopusPackage.DISK_IO_COUNTER: return createDisk_IO_Counter();
      case CanopusPackage.CRITERIA: return createCriteria();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case CanopusPackage.HARDWARE:
        return createHardwareFromString(eDataType, initialValue);
      case CanopusPackage.SUT_TYPE:
        return createSUTTypeFromString(eDataType, initialValue);
      case CanopusPackage.COUNTER_DISK:
        return createCOUNTER_DISKFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case CanopusPackage.HARDWARE:
        return convertHardwareToString(eDataType, instanceValue);
      case CanopusPackage.SUT_TYPE:
        return convertSUTTypeToString(eDataType, instanceValue);
      case CanopusPackage.COUNTER_DISK:
        return convertCOUNTER_DISKToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Include createInclude()
  {
    IncludeImpl include = new IncludeImpl();
    return include;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Monitoring createMonitoring()
  {
    MonitoringImpl monitoring = new MonitoringImpl();
    return monitoring;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Metric createMetric()
  {
    MetricImpl metric = new MetricImpl();
    return metric;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SUT createSUT()
  {
    SUTImpl sut = new SUTImpl();
    return sut;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LoadGenerator createLoadGenerator()
  {
    LoadGeneratorImpl loadGenerator = new LoadGeneratorImpl();
    return loadGenerator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Monitor createMonitor()
  {
    MonitorImpl monitor = new MonitorImpl();
    return monitor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MetricModel createMetricModel()
  {
    MetricModelImpl metricModel = new MetricModelImpl();
    return metricModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MetricCollection createMetricCollection()
  {
    MetricCollectionImpl metricCollection = new MetricCollectionImpl();
    return metricCollection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Threshold createThreshold()
  {
    ThresholdImpl threshold = new ThresholdImpl();
    return threshold;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Memory createMemory()
  {
    MemoryImpl memory = new MemoryImpl();
    return memory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Disk createDisk()
  {
    DiskImpl disk = new DiskImpl();
    return disk;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Transaction createTransaction()
  {
    TransactionImpl transaction = new TransactionImpl();
    return transaction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Disk_IO_Counter createDisk_IO_Counter()
  {
    Disk_IO_CounterImpl disk_IO_Counter = new Disk_IO_CounterImpl();
    return disk_IO_Counter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Criteria createCriteria()
  {
    CriteriaImpl criteria = new CriteriaImpl();
    return criteria;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Hardware createHardwareFromString(EDataType eDataType, String initialValue)
  {
    Hardware result = Hardware.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertHardwareToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SUTType createSUTTypeFromString(EDataType eDataType, String initialValue)
  {
    SUTType result = SUTType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertSUTTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public COUNTER_DISK createCOUNTER_DISKFromString(EDataType eDataType, String initialValue)
  {
    COUNTER_DISK result = COUNTER_DISK.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertCOUNTER_DISKToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CanopusPackage getCanopusPackage()
  {
    return (CanopusPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static CanopusPackage getPackage()
  {
    return CanopusPackage.eINSTANCE;
  }

} //CanopusFactoryImpl
