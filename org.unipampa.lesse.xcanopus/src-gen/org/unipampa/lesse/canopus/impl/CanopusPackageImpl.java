/**
 * generated by Xtext 2.14.0
 */
package org.unipampa.lesse.canopus.impl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import org.unipampa.lesse.canopus.CanopusFactory;
import org.unipampa.lesse.canopus.CanopusPackage;
import org.unipampa.lesse.canopus.Criteria;
import org.unipampa.lesse.canopus.Disk;
import org.unipampa.lesse.canopus.Disk_IO_Counter;
import org.unipampa.lesse.canopus.Hardware;
import org.unipampa.lesse.canopus.Include;
import org.unipampa.lesse.canopus.LoadGenerator;
import org.unipampa.lesse.canopus.Memory;
import org.unipampa.lesse.canopus.Metric;
import org.unipampa.lesse.canopus.MetricCollection;
import org.unipampa.lesse.canopus.MetricModel;
import org.unipampa.lesse.canopus.Model;
import org.unipampa.lesse.canopus.Monitor;
import org.unipampa.lesse.canopus.Monitoring;
import org.unipampa.lesse.canopus.SUTType;
import org.unipampa.lesse.canopus.Threshold;
import org.unipampa.lesse.canopus.Transaction;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class CanopusPackageImpl extends EPackageImpl implements CanopusPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass modelEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass includeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass monitoringEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass metricEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass sutEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass loadGeneratorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass monitorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass metricModelEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass metricCollectionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass thresholdEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass memoryEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass diskEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass transactionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass disk_IO_CounterEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass criteriaEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum hardwareEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum sutTypeEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum counteR_DISKEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see org.unipampa.lesse.canopus.CanopusPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private CanopusPackageImpl()
  {
    super(eNS_URI, CanopusFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link CanopusPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static CanopusPackage init()
  {
    if (isInited) return (CanopusPackage)EPackage.Registry.INSTANCE.getEPackage(CanopusPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredCanopusPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    CanopusPackageImpl theCanopusPackage = registeredCanopusPackage instanceof CanopusPackageImpl ? (CanopusPackageImpl)registeredCanopusPackage : new CanopusPackageImpl();

    isInited = true;

    // Create package meta-data objects
    theCanopusPackage.createPackageContents();

    // Initialize created meta-data
    theCanopusPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theCanopusPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(CanopusPackage.eNS_URI, theCanopusPackage);
    return theCanopusPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getModel()
  {
    return modelEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getModel_Includes()
  {
    return (EReference)modelEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getModel_Monitorings()
  {
    return (EReference)modelEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getModel_Suts()
  {
    return (EReference)modelEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getModel_LoadGenerators()
  {
    return (EReference)modelEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getInclude()
  {
    return includeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getInclude_ImportURI()
  {
    return (EAttribute)includeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getInclude_Name()
  {
    return (EAttribute)includeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getMonitoring()
  {
    return monitoringEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMonitoring_Name()
  {
    return (EAttribute)monitoringEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMonitoring_ProjectLabel()
  {
    return (EAttribute)monitoringEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMonitoring_ProjectAuthor()
  {
    return (EAttribute)monitoringEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMonitoring_Description()
  {
    return (EAttribute)monitoringEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMonitoring_Suts()
  {
    return (EReference)monitoringEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMonitoring_LoadGenerators()
  {
    return (EReference)monitoringEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getMetric()
  {
    return metricEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMetric_Name()
  {
    return (EAttribute)metricEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMetric_Threshold()
  {
    return (EReference)metricEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSUT()
  {
    return sutEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getSUT_Name()
  {
    return (EAttribute)sutEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getSUT_Hostname()
  {
    return (EAttribute)sutEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getSUT_Ip()
  {
    return (EAttribute)sutEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getSUT_Hardware()
  {
    return (EAttribute)sutEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getSUT_Type()
  {
    return (EAttribute)sutEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getLoadGenerator()
  {
    return loadGeneratorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getLoadGenerator_Name()
  {
    return (EAttribute)loadGeneratorEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getLoadGenerator_Hostname()
  {
    return (EAttribute)loadGeneratorEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getLoadGenerator_Ip()
  {
    return (EAttribute)loadGeneratorEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getLoadGenerator_Hardware()
  {
    return (EAttribute)loadGeneratorEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getMonitor()
  {
    return monitorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMonitor_Hostname()
  {
    return (EAttribute)monitorEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMonitor_Ip()
  {
    return (EAttribute)monitorEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMonitor_Hardware()
  {
    return (EAttribute)monitorEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMonitor_Sut()
  {
    return (EReference)monitorEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getMetricModel()
  {
    return metricModelEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMetricModel_Name()
  {
    return (EAttribute)metricModelEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMetricModel_Metricmodel()
  {
    return (EReference)metricModelEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getMetricCollection()
  {
    return metricCollectionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMetricCollection_Metric()
  {
    return (EReference)metricCollectionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getThreshold()
  {
    return thresholdEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getThreshold_Value()
  {
    return (EAttribute)thresholdEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getMemory()
  {
    return memoryEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getDisk()
  {
    return diskEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getDisk_Disk_io_counter()
  {
    return (EReference)diskEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getTransaction()
  {
    return transactionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getDisk_IO_Counter()
  {
    return disk_IO_CounterEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getDisk_IO_Counter_Name()
  {
    return (EAttribute)disk_IO_CounterEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getDisk_IO_Counter_CounterDisk()
  {
    return (EAttribute)disk_IO_CounterEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getDisk_IO_Counter_Threshold()
  {
    return (EReference)disk_IO_CounterEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getDisk_IO_Counter_Criteria()
  {
    return (EReference)disk_IO_CounterEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCriteria()
  {
    return criteriaEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getCriteria_Value()
  {
    return (EAttribute)criteriaEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCriteria_Threshold()
  {
    return (EReference)criteriaEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getHardware()
  {
    return hardwareEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getSUTType()
  {
    return sutTypeEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getCOUNTER_DISK()
  {
    return counteR_DISKEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CanopusFactory getCanopusFactory()
  {
    return (CanopusFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    modelEClass = createEClass(MODEL);
    createEReference(modelEClass, MODEL__INCLUDES);
    createEReference(modelEClass, MODEL__MONITORINGS);
    createEReference(modelEClass, MODEL__SUTS);
    createEReference(modelEClass, MODEL__LOAD_GENERATORS);

    includeEClass = createEClass(INCLUDE);
    createEAttribute(includeEClass, INCLUDE__IMPORT_URI);
    createEAttribute(includeEClass, INCLUDE__NAME);

    monitoringEClass = createEClass(MONITORING);
    createEAttribute(monitoringEClass, MONITORING__NAME);
    createEAttribute(monitoringEClass, MONITORING__PROJECT_LABEL);
    createEAttribute(monitoringEClass, MONITORING__PROJECT_AUTHOR);
    createEAttribute(monitoringEClass, MONITORING__DESCRIPTION);
    createEReference(monitoringEClass, MONITORING__SUTS);
    createEReference(monitoringEClass, MONITORING__LOAD_GENERATORS);

    metricEClass = createEClass(METRIC);
    createEAttribute(metricEClass, METRIC__NAME);
    createEReference(metricEClass, METRIC__THRESHOLD);

    sutEClass = createEClass(SUT);
    createEAttribute(sutEClass, SUT__NAME);
    createEAttribute(sutEClass, SUT__HOSTNAME);
    createEAttribute(sutEClass, SUT__IP);
    createEAttribute(sutEClass, SUT__HARDWARE);
    createEAttribute(sutEClass, SUT__TYPE);

    loadGeneratorEClass = createEClass(LOAD_GENERATOR);
    createEAttribute(loadGeneratorEClass, LOAD_GENERATOR__NAME);
    createEAttribute(loadGeneratorEClass, LOAD_GENERATOR__HOSTNAME);
    createEAttribute(loadGeneratorEClass, LOAD_GENERATOR__IP);
    createEAttribute(loadGeneratorEClass, LOAD_GENERATOR__HARDWARE);

    monitorEClass = createEClass(MONITOR);
    createEAttribute(monitorEClass, MONITOR__HOSTNAME);
    createEAttribute(monitorEClass, MONITOR__IP);
    createEAttribute(monitorEClass, MONITOR__HARDWARE);
    createEReference(monitorEClass, MONITOR__SUT);

    metricModelEClass = createEClass(METRIC_MODEL);
    createEAttribute(metricModelEClass, METRIC_MODEL__NAME);
    createEReference(metricModelEClass, METRIC_MODEL__METRICMODEL);

    metricCollectionEClass = createEClass(METRIC_COLLECTION);
    createEReference(metricCollectionEClass, METRIC_COLLECTION__METRIC);

    thresholdEClass = createEClass(THRESHOLD);
    createEAttribute(thresholdEClass, THRESHOLD__VALUE);

    memoryEClass = createEClass(MEMORY);

    diskEClass = createEClass(DISK);
    createEReference(diskEClass, DISK__DISK_IO_COUNTER);

    transactionEClass = createEClass(TRANSACTION);

    disk_IO_CounterEClass = createEClass(DISK_IO_COUNTER);
    createEAttribute(disk_IO_CounterEClass, DISK_IO_COUNTER__NAME);
    createEAttribute(disk_IO_CounterEClass, DISK_IO_COUNTER__COUNTER_DISK);
    createEReference(disk_IO_CounterEClass, DISK_IO_COUNTER__THRESHOLD);
    createEReference(disk_IO_CounterEClass, DISK_IO_COUNTER__CRITERIA);

    criteriaEClass = createEClass(CRITERIA);
    createEAttribute(criteriaEClass, CRITERIA__VALUE);
    createEReference(criteriaEClass, CRITERIA__THRESHOLD);

    // Create enums
    hardwareEEnum = createEEnum(HARDWARE);
    sutTypeEEnum = createEEnum(SUT_TYPE);
    counteR_DISKEEnum = createEEnum(COUNTER_DISK);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    memoryEClass.getESuperTypes().add(this.getMetric());
    diskEClass.getESuperTypes().add(this.getMetric());
    transactionEClass.getESuperTypes().add(this.getMetric());

    // Initialize classes and features; add operations and parameters
    initEClass(modelEClass, Model.class, "Model", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getModel_Includes(), this.getInclude(), null, "includes", null, 0, -1, Model.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getModel_Monitorings(), this.getMonitoring(), null, "monitorings", null, 0, -1, Model.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getModel_Suts(), this.getSUT(), null, "suts", null, 0, -1, Model.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getModel_LoadGenerators(), this.getLoadGenerator(), null, "loadGenerators", null, 0, -1, Model.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(includeEClass, Include.class, "Include", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getInclude_ImportURI(), ecorePackage.getEString(), "importURI", null, 0, 1, Include.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getInclude_Name(), ecorePackage.getEString(), "name", null, 0, 1, Include.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(monitoringEClass, Monitoring.class, "Monitoring", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMonitoring_Name(), ecorePackage.getEString(), "name", null, 0, 1, Monitoring.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMonitoring_ProjectLabel(), ecorePackage.getEString(), "projectLabel", null, 0, 1, Monitoring.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMonitoring_ProjectAuthor(), ecorePackage.getEString(), "projectAuthor", null, 0, 1, Monitoring.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMonitoring_Description(), ecorePackage.getEString(), "description", null, 0, 1, Monitoring.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMonitoring_Suts(), this.getSUT(), null, "suts", null, 0, -1, Monitoring.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMonitoring_LoadGenerators(), this.getLoadGenerator(), null, "loadGenerators", null, 0, -1, Monitoring.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(metricEClass, Metric.class, "Metric", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMetric_Name(), ecorePackage.getEString(), "name", null, 0, 1, Metric.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMetric_Threshold(), this.getThreshold(), null, "threshold", null, 0, 1, Metric.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(sutEClass, org.unipampa.lesse.canopus.SUT.class, "SUT", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSUT_Name(), ecorePackage.getEString(), "name", null, 0, 1, org.unipampa.lesse.canopus.SUT.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSUT_Hostname(), ecorePackage.getEString(), "hostname", null, 0, 1, org.unipampa.lesse.canopus.SUT.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSUT_Ip(), ecorePackage.getEString(), "ip", null, 0, 1, org.unipampa.lesse.canopus.SUT.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSUT_Hardware(), this.getHardware(), "hardware", null, 0, 1, org.unipampa.lesse.canopus.SUT.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSUT_Type(), this.getSUTType(), "type", null, 0, 1, org.unipampa.lesse.canopus.SUT.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(loadGeneratorEClass, LoadGenerator.class, "LoadGenerator", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getLoadGenerator_Name(), ecorePackage.getEString(), "name", null, 0, 1, LoadGenerator.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getLoadGenerator_Hostname(), ecorePackage.getEString(), "hostname", null, 0, 1, LoadGenerator.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getLoadGenerator_Ip(), ecorePackage.getEString(), "ip", null, 0, 1, LoadGenerator.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getLoadGenerator_Hardware(), this.getHardware(), "hardware", null, 0, 1, LoadGenerator.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(monitorEClass, Monitor.class, "Monitor", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMonitor_Hostname(), ecorePackage.getEString(), "hostname", null, 0, 1, Monitor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMonitor_Ip(), ecorePackage.getEString(), "ip", null, 0, 1, Monitor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMonitor_Hardware(), this.getHardware(), "hardware", null, 0, 1, Monitor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMonitor_Sut(), this.getSUT(), null, "sut", null, 0, 1, Monitor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(metricModelEClass, MetricModel.class, "MetricModel", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMetricModel_Name(), ecorePackage.getEString(), "name", null, 0, 1, MetricModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMetricModel_Metricmodel(), this.getMetricCollection(), null, "metricmodel", null, 0, -1, MetricModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(metricCollectionEClass, MetricCollection.class, "MetricCollection", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMetricCollection_Metric(), this.getMetric(), null, "metric", null, 0, -1, MetricCollection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(thresholdEClass, Threshold.class, "Threshold", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getThreshold_Value(), ecorePackage.getEInt(), "value", null, 0, 1, Threshold.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(memoryEClass, Memory.class, "Memory", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(diskEClass, Disk.class, "Disk", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDisk_Disk_io_counter(), this.getDisk_IO_Counter(), null, "disk_io_counter", null, 0, 1, Disk.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(transactionEClass, Transaction.class, "Transaction", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(disk_IO_CounterEClass, Disk_IO_Counter.class, "Disk_IO_Counter", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDisk_IO_Counter_Name(), ecorePackage.getEString(), "name", null, 0, 1, Disk_IO_Counter.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDisk_IO_Counter_CounterDisk(), this.getCOUNTER_DISK(), "counterDisk", null, 0, -1, Disk_IO_Counter.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDisk_IO_Counter_Threshold(), this.getThreshold(), null, "threshold", null, 0, 1, Disk_IO_Counter.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDisk_IO_Counter_Criteria(), this.getCriteria(), null, "criteria", null, 0, 1, Disk_IO_Counter.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(criteriaEClass, Criteria.class, "Criteria", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCriteria_Value(), ecorePackage.getEInt(), "value", null, 0, 1, Criteria.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCriteria_Threshold(), this.getThreshold(), null, "threshold", null, 0, 1, Criteria.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Initialize enums and add enum literals
    initEEnum(hardwareEEnum, Hardware.class, "Hardware");
    addEEnumLiteral(hardwareEEnum, Hardware.PHYSICA_MACHINE);
    addEEnumLiteral(hardwareEEnum, Hardware.VIRTUAL_MACHINE);
    addEEnumLiteral(hardwareEEnum, Hardware.CLOUD_SERVICE);

    initEEnum(sutTypeEEnum, SUTType.class, "SUTType");
    addEEnumLiteral(sutTypeEEnum, SUTType.DESKTOPAPP);
    addEEnumLiteral(sutTypeEEnum, SUTType.DATABASE);
    addEEnumLiteral(sutTypeEEnum, SUTType.WEBAPP);
    addEEnumLiteral(sutTypeEEnum, SUTType.WEBSERVICE);

    initEEnum(counteR_DISKEEnum, org.unipampa.lesse.canopus.COUNTER_DISK.class, "COUNTER_DISK");
    addEEnumLiteral(counteR_DISKEEnum, org.unipampa.lesse.canopus.COUNTER_DISK.AVG_DISK_SECS_TRANSFER_COUNTER);
    addEEnumLiteral(counteR_DISKEEnum, org.unipampa.lesse.canopus.COUNTER_DISK._IDLE_TIME_COUNTER);
    addEEnumLiteral(counteR_DISKEEnum, org.unipampa.lesse.canopus.COUNTER_DISK.DISK_TRANSFERS_SEC_COUNTER);
    addEEnumLiteral(counteR_DISKEEnum, org.unipampa.lesse.canopus.COUNTER_DISK.AVG_DISK_QUEUE_LENGTH_COUNTER);
    addEEnumLiteral(counteR_DISKEEnum, org.unipampa.lesse.canopus.COUNTER_DISK.SPLIT_IO_SEC_COUNTER);
    addEEnumLiteral(counteR_DISKEEnum, org.unipampa.lesse.canopus.COUNTER_DISK.FREE_MEGABYTES_COUNTER);

    // Create resource
    createResource(eNS_URI);
  }

} //CanopusPackageImpl
