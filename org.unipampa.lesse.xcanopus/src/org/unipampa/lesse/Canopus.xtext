grammar org.unipampa.lesse.Canopus with org.eclipse.xtext.common.Terminals

generate canopus "http://www.unipampa.org/lesse/Canopus"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore



Model: 
	   includes += Include*
	   monitorings += Monitoring*
	   suts += SUT*
	   loadGenerators+=LoadGenerator*
	   
; 
	
Include:
	'include' importURI=STRING 'as' name=ID
;

Monitoring:
	'Monitoring'
	name=ID
	'{'
		'projectLabel' projectLabel=EString
		'projectAuthor' projectAuthor=EString
		'description' description=EString
		'sut' suts+=[SUT|ID]+
		'loadGenerators' loadGenerators+=[LoadGenerator|ID]+
	//	('monitors' monitors+=[Monitor])+
	//	('metrics' metrics+=[MetricModel])+
	'}';

Metric:
	Memory | Disk | Transaction;


EString returns ecore::EString:
	STRING | ID;

SUT:
	{SUT}
	'SUT'
	name=ID
	'{'
		'hostname' hostname=EString?
		'ip' ip=EString?
		'hardware' hardware=Hardware?
		'type' type=SUTType?
	//	('sut' sut=[SUT|EString])?
	//	'metricmodel' metricmodel=[MetricModel|ID]?
	'}';

LoadGenerator:
	'LoadGenerator'
	name=ID
	'{'
		'hostname' hostname=EString
		'ip' ip=EString
		'hardware' hardware=Hardware
		'sut' sut=[SUT|ID]?
		//('metricmodel' metricmodel=[MetricModel|EString])?
	'}';

Monitor:
	{Monitor}
	'Monitor'
	'{'
		'hostname' hostname=EString?
		'ip' ip=EString?
		'hardware' hardware=Hardware?
		'sut' sut=[SUT|ID]?
	'}';

MetricModel:
	'MetricModel'
	name=ID
	'{'
		('metricmodel' '{' metricmodel+=MetricCollection ( "," metricmodel+=MetricCollection)* '}' )?
	'}';

enum Hardware:
				PHYSICA_MACHINE = 'PHYSICA_MACHINE' | VIRTUAL_MACHINE = 'VIRTUAL_MACHINE' | CLOUD_SERVICE = 'CLOUD_SERVICE';

enum SUTType:
				DESKTOPAPP = 'DESKTOPAPP' | DATABASE = 'DATABASE' | WEBAPP = 'WEBAPP' | WEBSERVICE = 'WEBSERVICE';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

MetricCollection:
	'MetricCollection'
	'{'
		'metric' '{' metric+=Metric ( "," metric+=Metric)* '}' 
	'}';

Threshold:
	{Threshold} 'Threshold'
	'{'
		('value' value=EInt)?
	'}';

Memory:
	'Memory'
	name=EString
	'{'
		('threshold' threshold=[Threshold|EString])?
	'}';

Disk:
	'Disk'
	name=EString
	'{'
		('threshold' threshold=[Threshold|EString])?
		('disk_io_counter' disk_io_counter=[Disk_IO_Counter|EString])?
	'}';

Transaction:
	'Transaction'
	name=EString
	'{'
		('threshold' threshold=[Threshold|EString])?
	'}';

EInt returns ecore::EInt:
	'-'? INT;

Disk_IO_Counter:
	'Disk_IO_Counter'
	name=EString
	'{'
		('counterDisk' '{' counterDisk+=COUNTER_DISK ( "," counterDisk+=COUNTER_DISK)* '}' )?
		('threshold' threshold=[Threshold|EString])?
		('criteria' criteria=[Criteria|EString])?
	'}';

Criteria:
	{Criteria} 'Criteria'
	'{'
		('value' value=EInt)?
		('threshold' threshold=[Threshold|EString])?
	'}';

enum COUNTER_DISK:
				AVG_DISK_SECS_TRANSFER_COUNTER = 'AVG_DISK_SECS_TRANSFER_COUNTER' | _IDLE_TIME_COUNTER = '_IDLE_TIME_COUNTER' | DISK_TRANSFERS_SEC_COUNTER = 'DISK_TRANSFERS_SEC_COUNTER' | AVG_DISK_QUEUE_LENGTH_COUNTER = 'AVG_DISK_QUEUE_LENGTH_COUNTER' | SPLIT_IO_SEC_COUNTER = 'SPLIT_IO_SEC_COUNTER' | FREE_MEGABYTES_COUNTER = 'FREE_MEGABYTES_COUNTER';

@Override 
terminal ID: 
    '^'?('a'..'z'|'A'..'Z'|'_')('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
 
@Override 
terminal INT returns ecore::EInt: 
    ('0'..'9')+;
 
@Override 
terminal STRING: 
    '"' ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
    "'" ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'";
 
@Override 
terminal ML_COMMENT: 
    '/*' -> '*/';
 
@Override 
terminal SL_COMMENT: 
    '//' !('\n'|'\r')* ('\r'? '\n')?;
 
@Override 
terminal WS: 
    (' '|'\t'|'\r'|'\n')+;
 
@Override 
terminal ANY_OTHER: 
    .;				
				
