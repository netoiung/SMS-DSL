/**
 * generated by Xtext 2.14.0
 */
package org.unipampa.lesse.canopus.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

import org.unipampa.lesse.canopus.COUNTER_DISK;
import org.unipampa.lesse.canopus.CanopusPackage;
import org.unipampa.lesse.canopus.Criteria;
import org.unipampa.lesse.canopus.Disk_IO_Counter;
import org.unipampa.lesse.canopus.Threshold;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Disk IO Counter</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.unipampa.lesse.canopus.impl.Disk_IO_CounterImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.unipampa.lesse.canopus.impl.Disk_IO_CounterImpl#getCounterDisk <em>Counter Disk</em>}</li>
 *   <li>{@link org.unipampa.lesse.canopus.impl.Disk_IO_CounterImpl#getThreshold <em>Threshold</em>}</li>
 *   <li>{@link org.unipampa.lesse.canopus.impl.Disk_IO_CounterImpl#getCriteria <em>Criteria</em>}</li>
 * </ul>
 *
 * @generated
 */
public class Disk_IO_CounterImpl extends MinimalEObjectImpl.Container implements Disk_IO_Counter
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getCounterDisk() <em>Counter Disk</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCounterDisk()
   * @generated
   * @ordered
   */
  protected EList<COUNTER_DISK> counterDisk;

  /**
   * The cached value of the '{@link #getThreshold() <em>Threshold</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getThreshold()
   * @generated
   * @ordered
   */
  protected Threshold threshold;

  /**
   * The cached value of the '{@link #getCriteria() <em>Criteria</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCriteria()
   * @generated
   * @ordered
   */
  protected Criteria criteria;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Disk_IO_CounterImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CanopusPackage.Literals.DISK_IO_COUNTER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CanopusPackage.DISK_IO_COUNTER__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<COUNTER_DISK> getCounterDisk()
  {
    if (counterDisk == null)
    {
      counterDisk = new EDataTypeEList<COUNTER_DISK>(COUNTER_DISK.class, this, CanopusPackage.DISK_IO_COUNTER__COUNTER_DISK);
    }
    return counterDisk;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Threshold getThreshold()
  {
    if (threshold != null && threshold.eIsProxy())
    {
      InternalEObject oldThreshold = (InternalEObject)threshold;
      threshold = (Threshold)eResolveProxy(oldThreshold);
      if (threshold != oldThreshold)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, CanopusPackage.DISK_IO_COUNTER__THRESHOLD, oldThreshold, threshold));
      }
    }
    return threshold;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Threshold basicGetThreshold()
  {
    return threshold;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setThreshold(Threshold newThreshold)
  {
    Threshold oldThreshold = threshold;
    threshold = newThreshold;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CanopusPackage.DISK_IO_COUNTER__THRESHOLD, oldThreshold, threshold));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Criteria getCriteria()
  {
    if (criteria != null && criteria.eIsProxy())
    {
      InternalEObject oldCriteria = (InternalEObject)criteria;
      criteria = (Criteria)eResolveProxy(oldCriteria);
      if (criteria != oldCriteria)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, CanopusPackage.DISK_IO_COUNTER__CRITERIA, oldCriteria, criteria));
      }
    }
    return criteria;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Criteria basicGetCriteria()
  {
    return criteria;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCriteria(Criteria newCriteria)
  {
    Criteria oldCriteria = criteria;
    criteria = newCriteria;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CanopusPackage.DISK_IO_COUNTER__CRITERIA, oldCriteria, criteria));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CanopusPackage.DISK_IO_COUNTER__NAME:
        return getName();
      case CanopusPackage.DISK_IO_COUNTER__COUNTER_DISK:
        return getCounterDisk();
      case CanopusPackage.DISK_IO_COUNTER__THRESHOLD:
        if (resolve) return getThreshold();
        return basicGetThreshold();
      case CanopusPackage.DISK_IO_COUNTER__CRITERIA:
        if (resolve) return getCriteria();
        return basicGetCriteria();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CanopusPackage.DISK_IO_COUNTER__NAME:
        setName((String)newValue);
        return;
      case CanopusPackage.DISK_IO_COUNTER__COUNTER_DISK:
        getCounterDisk().clear();
        getCounterDisk().addAll((Collection<? extends COUNTER_DISK>)newValue);
        return;
      case CanopusPackage.DISK_IO_COUNTER__THRESHOLD:
        setThreshold((Threshold)newValue);
        return;
      case CanopusPackage.DISK_IO_COUNTER__CRITERIA:
        setCriteria((Criteria)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CanopusPackage.DISK_IO_COUNTER__NAME:
        setName(NAME_EDEFAULT);
        return;
      case CanopusPackage.DISK_IO_COUNTER__COUNTER_DISK:
        getCounterDisk().clear();
        return;
      case CanopusPackage.DISK_IO_COUNTER__THRESHOLD:
        setThreshold((Threshold)null);
        return;
      case CanopusPackage.DISK_IO_COUNTER__CRITERIA:
        setCriteria((Criteria)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CanopusPackage.DISK_IO_COUNTER__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case CanopusPackage.DISK_IO_COUNTER__COUNTER_DISK:
        return counterDisk != null && !counterDisk.isEmpty();
      case CanopusPackage.DISK_IO_COUNTER__THRESHOLD:
        return threshold != null;
      case CanopusPackage.DISK_IO_COUNTER__CRITERIA:
        return criteria != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", counterDisk: ");
    result.append(counterDisk);
    result.append(')');
    return result.toString();
  }

} //Disk_IO_CounterImpl
